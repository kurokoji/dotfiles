[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold']
# hook_add {{{
hook_add = '''
nnoremap : <Cmd>call CommandlinePre()<CR>:
function! CommandlinePre() abort
  cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  call ddc#custom#patch_buffer('cmdlineSources', ['necovim', 'around'])
  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()
  " Enable command line completion
  call ddc#enable_cmdline_completion()
endfunction
function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>
  silent! cunmap <C-n>
  silent! cunmap <C-p>
  silent! cunmap <C-y>
  silent! cunmap <C-e>
  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
endfunction
'''
# }}}
# hook_source {{{
hook_source = '''
call ddc#custom#patch_global({
      \   'sources': ['neosnippet', 'vim-lsp', 'around', 'file'],
      \   'sourceOptions': {
      \     '_': {
      \       'matchers': ['matcher_head'],
      \       'sorters': ['sorter_rank']
      \     },
      \     'around': {
      \       'mark': 'A',
      \     },
      \     'vim-lsp': {
      \       'matchers': ['matcher_head'],
      \       'mark': 'LSP',
      \       'forceCompletionPattern': '\.\w*|:\w*|->\w*'
      \     },
      \     'file': {
      \       'mark': 'F',
      \       'isVolatile': v:true,
      \       'forceCompletionPattern': '\S/\S*',
      \     },
      \     'skkeleton': {
      \       'mark': 'Skkeleton',
      \       'matchers': ['skkeleton'],
      \       'sorters': [],
      \       'minAutoCompleteLength': 2,
      \     },
      \     'neosnippet': {
      \       'mark': 'NSnip'
      \     },
      \   },
      \   'sourceParams': {
      \     'around': {
      \       'maxSize': 500,
      \     }
      \   }
      \ })


call ddc#enable()
'''
# }}}

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'
depends = ['vim-lsp']

[[plugins]]
repo = 'Shougo/pum.vim'
# hook_source {{{
hook_source = '''
call pum#set_option('max_width', 80)
call pum#set_option('padding', v:true)
" call pum#set_option('border', ['╭', '─', '╮', '│', '╯', '─', '╰', '│'])
'''
# }}}

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_source = 'ddc.vim'
depends = ['neosnippet-snippets']
# hook_add {{{
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''
# }}}

[[plugins]]
repo = 'kurokoji/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
depends = 'ddc.vim'
# hook_source {{{
hook_source = '''
'''
# }}}

[[plugins]]
repo = 'vim-skk/skkeleton'
on_source = 'ddc.vim'
# hook_add {{{
hook_add = '''
function! s:skkeleton_init() abort
  call skkeleton#config({
        \ 'eggLikeNewline': v:true,
        \ 'globalJisyo': '~/.skk/SKK-JISYO.L',
        \ })
endfunction

function! s:skkeleton_pre() abort
  " Overwrite sources
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources', ['skkeleton'])
endfunction

function! s:skkeleton_post() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
endfunction


autocmd User skkeleton-initialize-pre call s:skkeleton_init()
autocmd User skkeleton-enable-pre call s:skkeleton_pre()
autocmd User skkeleton-disable-pre call s:skkeleton_post()

imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
# }}}
# hook_source {{{
hook_source = '''
'''
# }}}

[[plugins]]
repo = 'Shougo/ddc-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-cmdline'
on_source = 'ddc.vim'
