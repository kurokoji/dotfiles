[[plugins]]
repo = 'Shougo/neoinclude.vim'
if = '0'
on_ft = ['c', 'cpp']
# hook_source {{{
hook_source = '''

if has('mac')
  let g:neoinclude#paths = {
        \ 'cpp': '.,/usr/local/opt/llvm/include/c++/v1,/usr/local/opt/opencv/include/opencv4,/usr/local/opt/boost/include,/usr/local/opt/zbar/include/zbar,/usr/local/opt/zbar/include,/Users/nazuna/.local/include'
        \ }
endif

if !exists('g:neoinclude#reverse_exprs')
  let g:neoinclude#reverse_exprs = {}
endif

if !exists('g:neoinclude#exts')
  let g:neoinclude#exts = {}
endif
call neoinclude#util#set_default_dictionary('g:neoinclude#paths', 'python', '')
call neoinclude#util#set_default_dictionary('g:neoinclude#paths', 'python3', '')
'''
# }}}

[[plugins]]
repo = 'Shougo/denite.nvim'
on_ft = ['Denite']
# hook_add {{{
hook_add = '''
'''
# }}}
# hook_source {{{
hook_source = '''
" nnoremap [denite] <Nop>
" nmap <C-u><C-p> [denite]
"
" nmap <silent> [denite]f :<C-u>DeniteBufferDir -direction=topleft file file:new<CR>
" nmap <silent> <C-u><C-p> :<C-u>Denite -resume -buffer-name=files file/rec buffer<CR>
nmap <silent> <C-u><C-p> :<C-u>Denite file<CR>
" ""nmap <silent> <C-u><C-p> :<C-u>Denite  file/rec<CR>
" " nmap <silent> <C-u><C-p> :<C-u>Denite file_rec<CR>
" nmap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
" nmap <silent> <C-u><C-]> :<C-u>DeniteCursorWord grep<CR>
"
" call denite#custom#map('insert', '<C-n>', '<denite:move_to_next_line>', 'noremap')
" call denite#custom#map('insert', '<C-p>', '<denite:move_to_previous_line>', 'noremap')
" call denite#custom#map('_', '<C-h>', '<denite:do_action:split>')
" call denite#custom#map('insert', '<C-h>', '<denite:do_action:split>')
" call denite#custom#map('_', '<C-v>', '<denite:do_action:vsplit>')
" call denite#custom#map('insert', '<C-v>', '<denite:do_action:vsplit>')
"
" call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
" call denite#custom#var('grep', 'command', ['rg', '--threads', '3'])
" call denite#custom#var('grep', 'recursive_opts', [])
" call denite#custom#var('grep', 'pattern_opt', [])
" call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])

call denite#custom#option('_', {
      \ 'cached_filter': v:true,
      \ 'cursor_shape': v:true,
      \ 'cursor_wrap': v:true,
      \ 'highlight_filter_background': 'DeniteFilter',
      \ 'highlight_matched_char': 'Underlined',
      \ 'matchers': 'matcher/fruzzy',
      \ 'prompt': 'Î» ',
      \ 'split': 'floating',
      \ 'start_filter': v:true,
      \ 'statusline': v:false,
      \ })
function! s:denite_detect_size() abort
  let s:denite_winheight = 20
  let s:denite_winrow = &lines > s:denite_winheight ? (&lines - s:denite_winheight) / 2 : 0
  let s:denite_winwidth = &columns > 240 ? &columns / 2 : 120
  let s:denite_wincol = &columns > s:denite_winwidth ? (&columns - s:denite_winwidth) / 2 : 0
  call denite#custom#option('_', {
        \ 'wincol': s:denite_wincol,
        \ 'winheight': s:denite_winheight,
        \ 'winrow': s:denite_winrow,
        \ 'winwidth': s:denite_winwidth,
        \ })
endfunction
augroup denite-detect-size
  autocmd!
  autocmd VimResized * call <SID>denite_detect_size()
augroup END
call s:denite_detect_size()


call denite#custom#option('search', { 'start_filter': 0, 'no_empty': 1 })
call denite#custom#option('list', { 'start_filter': 0 })
call denite#custom#option('jump', { 'start_filter': 0 })
call denite#custom#option('git', { 'start_filter': 0 })
call denite#custom#option('mpc', { 'winheight': 20 })


" MATCHERS
" Default is 'matcher/fuzzy'
call denite#custom#source('tag', 'matchers', ['matcher/substring'])
call denite#custom#source('file/rec', 'matchers', ['matcher/fruzzy'])

if has('nvim') && &runtimepath =~# '\/cpsm'
  call denite#custom#source(
        \ 'buffer,file_mru,file/old,file/rec,grep,mpc,line,neoyank',
        \ 'matchers', ['matcher/cpsm', 'matcher/fuzzy'])
endif


" CONVERTERS
" Default is none
call denite#custom#source(
      \ 'buffer,file_mru,file/old,file/rec,directory/rec,directory_mru',
      \ 'converters', ['devicons_denite_converter','converter_relative_word'])

" FIND and GREP COMMANDS
if executable('ag')
  " The Silver Searcher
  call denite#custom#var('file/rec', 'command',
        \ ['ag', '-U', '--hidden', '--follow', '--nocolor', '--nogroup', '-g', ''])

  " Setup ignore patterns in your .agignore file!
  " https://github.com/ggreer/the_silver_searcher/wiki/Advanced-Usage

  call denite#custom#var('grep', 'command', ['ag'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'default_opts',
        \ [ '--skip-vcs-ignores', '--vimgrep', '--smart-case', '--hidden' ])

elseif executable('ack')
  " Ack command
  call denite#custom#var('grep', 'command', ['ack'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'pattern_opt', ['--match'])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'default_opts',
        \ ['--ackrc', $HOME.'/.config/ackrc', '-H',
        \ '--nopager', '--nocolor', '--nogroup', '--column'])

elseif executable('rg')
  " Ripgrep
  call denite#custom#var('file/rec', 'command',
        \ ['rg', '--files', '--glob', '!.git'])
  call denite#custom#var('grep', 'command', ['rg', '--threads', '1'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', ['--'])
  call denite#custom#var('grep', 'default_opts',
        \ ['-i', '--vimgrep', '--no-heading'])
endif


" KEY MAPPINGS
autocmd FileType denite call s:denite_settings()
function! s:denite_settings() abort
  highlight! link CursorLine Visual
  nnoremap <silent><buffer><expr> <CR> denite#do_map('do_action')
  nnoremap <silent><buffer><expr> i    denite#do_map('open_filter_buffer')
  nnoremap <silent><buffer><expr> d    denite#do_map('do_action', 'delete')
  nnoremap <silent><buffer><expr> p    denite#do_map('do_action', 'preview')
  nnoremap <silent><buffer><expr> st   denite#do_map('do_action', 'tabopen')
  nnoremap <silent><buffer><expr> sg   denite#do_map('do_action', 'vsplit')
  nnoremap <silent><buffer><expr> sv   denite#do_map('do_action', 'split')
  nnoremap <silent><buffer><expr> '    denite#do_map('quick_move')
  nnoremap <silent><buffer><expr> q    denite#do_map('quit')
  nnoremap <silent><buffer><expr> r    denite#do_map('redraw')
  nnoremap <silent><buffer><expr> yy   denite#do_map('do_action', 'yank')
  nnoremap <silent><buffer><expr> <Esc>   denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-u>   denite#do_map('restore_sources')
  nnoremap <silent><buffer><expr> <C-f>   denite#do_map('do_action', 'defx')
  nnoremap <silent><buffer><expr> <C-x>   denite#do_map('choose_action')
  nnoremap <silent><buffer><expr><nowait> <Space> denite#do_map('toggle_select').'j'
endfunction

autocmd FileType denite-filter call s:denite_filter_settings()
function! s:denite_filter_settings() abort
  nnoremap <silent><buffer><expr> <Esc>  denite#do_map('quit')
  " inoremap <silent><buffer><expr> <Esc>  denite#do_map('quit')
  nnoremap <silent><buffer><expr> q      denite#do_map('quit')
  imap <silent><buffer> <C-c> <Plug>(denite_filter_quit)
  "inoremap <silent><buffer><expr> <C-c>  denite#do_map('quit')
  nnoremap <silent><buffer><expr> <C-c>  denite#do_map('quit')
  inoremap <silent><buffer>       kk     <Esc><C-w>p
  nnoremap <silent><buffer>       kk     <C-w>p
  inoremap <silent><buffer>       jj     <Esc><C-w>p
  nnoremap <silent><buffer>       jj     <C-w>p
endfunction
'''
# }}}

[[plugins]]
repo = 'Shougo/defx.nvim'
on_ft = ['Defx']
# hook_source {{{
hook_add = '''
nnoremap <silent><C-b> :Defx -toggle -split=vertical -winwidth=30 -direction=topleft<CR>
autocmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
  \ defx#do_action('open', 'wincmd w \| drop')
  nnoremap <silent><buffer><expr> c
  \ defx#do_action('copy')
  nnoremap <silent><buffer><expr> m
  \ defx#do_action('move')
  nnoremap <silent><buffer><expr> p
  \ defx#do_action('paste')
  nnoremap <silent><buffer><expr> E
  \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> P
  \ defx#do_action('open', 'pedit')
  nnoremap <silent><buffer><expr> K
  \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
  \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> h
  \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> .
  \ defx#do_action('toggle_ignored_files')
  nnoremap <silent><buffer><expr> ~
  \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
  \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
  \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> *
  \ defx#do_action('toggle_select_all')
  nnoremap <silent><buffer><expr> <C-l>
  \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
  \ defx#do_action('print')
endfunction
'''
# }}}
