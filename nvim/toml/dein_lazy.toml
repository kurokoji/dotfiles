[[plugins]]
repo = 'Shougo/neoinclude.vim'
# on_i = 1
# hook_add {{{
hook_add = '''
let g:neoinclude#paths = {
  \ 'cpp': '.,/usr/include/c++/v1,/applications/xcode.app/contents/developer/toolchains/xcodedefault.xctoolchain/usr/include/c++/v1,/usr/local/include,/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/include,/applications/xcode.app/contents/developer/toolchains/xcodedefault.xctoolchain/usr/lib/clang/9.0.0/include,/usr/include,/System/Library/Frameworks,/Library/Frameworks,/usr/local/cellar/boost/1.63.0/include',
  \ 'd': '.,/usr/local/opt/dmd/include/dlang/dmd'
  \ }
" let g:neoinclude#paths = {'cpp': '/usr/local/opt/llvm/lib/clang/5.0.0/include'}


"if !exists('g:neoinclude#delimiters')
"  let g:neoinclude#delimiters = {}
"endif

"let g:neoinclude#delimiters = {
"  \ 'd': '.'
"  \ }

if !exists('g:neoinclude#reverse_exprs')
  let g:neoinclude#reverse_exprs = {}
endif

let g:neoinclude#reverse_exprs.d = 'substitute(substitute(v:fname, "\\.", "/", "g"), "$", ".d", "")'

if !exists('g:neoinclude#exts')
  let g:neoinclude#exts = {}
endif

let g:neoinclude#exts.d = ['', 'd']

let g:neoinclude#patterns = {
  \ 'd': '^\s*\%(\%(public\|static\)\s\+\)\?\<import'
  \ }
'''
# }}}

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['neoinclude.vim', 'neosnippet.vim']
# hook_add {{{
hook_add = ''' 
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_at_smartcase = 1
let g:deoplete#enable_camel_case = 1
" let g:deoplete#auto_complete_delay = 1
let g:deoplete#auto_complete_start_length = 2

" imap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
" imap <expr><cr>  pumvisible() ? deoplete#close_popup() : "\<plug>(smartinput_cr)"
" imap <expr><c-h> deoplete#smart_close_popup()
"imap <expr><tab> pumvisible() ? "\<c-n>" : "\<tab>"
imap <expr><cr>  pumvisible() ? deoplete#close_popup() : <cr>
imap <expr><c-h> deoplete#smart_close_popup()
inoremap <expr><tab> pumvisible() ? "\<c-n>" : neosnippet#expandable_or_jumpable() ? "\<plug>(neosnippet_expand_or_jump)" : "\<tab>"
'''
# }}}

[[plugins]]
repo = 'mhartington/nvim-typescript'
on_i = 1
on_ft = ['typescript']
# hook_add {{{
hook_add = '''

'''
# }}}

[[plugins]]
repo = 'Shougo/deoplete-clangx'
# on_i = 1
on_ft = ['c', 'cpp']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'landaire/deoplete-d.git'
on_i = 1
on_ft = ['d']
depends = ['deoplete.nvim']
# hook_add {{{
hook_add = '''
'''
# }}}

[[plugins]]
repo = 'zchee/deoplete-go'
on_i = 1
on_ft = ['go']
depends = ['deoplete.nvim']
# hook_add {{{
hook_add = '''
let g:deoplete#sources#go#gocode_binary = $GOPATH . '/bin/gocode'
'''
# }}}

[[plugins]]
repo = 'uplus/deoplete-solargraph'
on_i = 1
on_ft = ['ruby']
depends = ['deoplete.nvim']

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_ft = ['snippet']
on_i = 1
depends = ['neosnippet-snippets', 'deoplete.nvim']
# hook_source {{{
hook_source = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
" map <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
"inoremap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "\<C-n>" : "\<TAB>"
"snoremap <expr><TAB> neosnippet#jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"imap <expr><TAB> pumvisible() ? "\<C-n>" : neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ? "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"


if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''
#}}}

[[plugins]]
repo = 'kurokoji/neosnippet-snippets'
on_i = 1
on_ft = ['snippet']

[[plugins]]
repo = 'Shougo/neco-vim'
on_i = 1
on_ft = ['vim']

[[plugins]]
repo = 'elzr/vim-json'
on_ft = ['json']
# hook_add {{{
hook_add = '''
let g:vim_json_syntax_conceal = 0
'''
#}}}

[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = ['rust']
# hook_add {{{
hook_add = '''
let g:rustfmt_autosave = 1
'''
# }}}

[[plugins]]
repo = 'racer-rust/vim-racer'
on_ft = ['rust']
# hook_add {{{
hook_add = '''
set hidden
let g:racer_cmd = '$HOME/.cargo/bin/racer'
'''
# }}}
