[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
# hook_add {{{
hook_add = '''
let g:deol#enable_ddc_completion = v:true
let g:deol#floating_border = ['╭', '─', '╮', '│', '╯', '─', '╰', '│']

function s:floating_deol() abort
  let width_per = 0.8
  let height_per = 0.6

  let winwidth = float2nr(&columns * width_per)
  let wincol = float2nr((&columns - (&columns * width_per)) / 2)
  let winheight = float2nr(&lines * height_per)
  let winrow = float2nr((&lines - (&lines * height_per)) / 2)

  execute 'Deol -toggle -split=floating -winwidth=' . winwidth . ' -winheight=' . winheight . ' -wincol=' . wincol . '-winrow' . winrow
endfunction

function! s:open_deol() abort
  let winheight = &lines / 2
  execute 'Deol -split=horizontal -toggle -winheight=' . winheight
endfunction

command DeolSplit :Deol -split -toggle
command DeolVertical :Deol -split=vertical -toggle
command DeolFloating :call <SID>floating_deol()

nnoremap <Leader>s <Cmd>DeolSplit<CR>
nnoremap <Leader>v <Cmd>DeolVertical<CR>
nnoremap <Leader>t <Cmd>DeolFloating<CR>
'''
# }}}

[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown']
# hook_add {{{
hook_add = '''
let g:previm_enable_realtime = 1
augroup PrevimSettings
  autocmd!
  autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END
'''
# }}}

[[plugins]]
repo = 'tpope/vim-surround'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']

[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = 'CursorHold'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
hook_post_update = 'TSUpdate'
# hook_source {{{
hook_source = '''
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    'python', 'cpp', 'go', 'typescript',
    'toml', 'rust', 'html', 'bash', 'javascript', 'lua', 'tsx', 'haskell'
  },
  sync_install = false,
  autotag = {
    enable = true,
  },
  indent = {
    enable = true
  },
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  },
}

require 'nvim-treesitter.install'.compilers = { "zig", "gcc" }
EOF
'''
# }}}

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
if = 'has("nvim")'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# hook_source {{{
hook_source = '''
lua <<EOF
vim.opt.list = true
-- vim.opt.listchars:append("eol:↵")

require('indent_blankline').setup {
  show_end_of_line = true,
  space_char_blankline = ' ',
  show_current_context = true,
  show_current_context_start = true,
}
EOF
'''
# }}}

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
if = 'has("nvim")'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# hook_source {{{
hook_source = '''
lua <<EOF
require('gitsigns').setup()
EOF
'''
# }}}

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# hook_source {{{
hook_source = '''
lua <<EOF
require("nvim-autopairs").setup {}
EOF
'''
# }}}

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# hook_add {{{
hook_add = '''
nmap <silent> <Leader>rn <Cmd>lua vim.lsp.buf.rename()<CR>
nmap <silent> <Leader>h <Cmd>lua vim.lsp.buf.hover()<CR>
nmap <silent> <Leader>ca <Cmd>lua vim.lsp.buf.code_action()<CR>
nmap <silent> gd <Cmd>lua vim.lsp.buf.definition()<CR>
nmap <silent> gt <Cmd>lua vim.lsp.buf.type_definition()<CR>
nmap <silent> gi <Cmd>lua vim.lsp.buf.implementation()<CR>
nmap <silent> gr <Cmd>lua vim.lsp.buf.references()<CR>
nmap <silent> F <Cmd>lua vim.lsp.buf.format { async = true }<CR>
'''
# }}}
# hook_source {{{
hook_source = '''
lua << EOF
local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
end
EOF
'''
# }}}

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'nvim-lspconfig'
# hook_source {{{
hook_source = '''
lua << EOF
require("mason").setup({
    ui = {
        border = {'╭', '─', '╮', '│', '╯', '─', '╰', '│'},
        icons = {
            package_installed = "✓",
            package_pending = "➜",
            package_uninstalled = "✗"
        }
    }
})
EOF
'''
# }}}

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_source = 'mason.nvim'
# hook_source {{{
hook_source = '''
lua << EOF
require("mason-lspconfig").setup_handlers({
  function(server)
    if server == 'serve_d' then
      -- local dmdPath = vim.fn.system('asdf where dmd')
      local dmdPath = '~/.asdf/installs/dmd/2.100.2'
      require('lspconfig')[server].setup({
        -- https://github.com/Pure-D/serve-d/blob/master/views/ja.txt
        settings = {
          d = {
            stdlibPath = dmdPath .. '/dmd2/src/phobos',
          },
          dfmt = {
            braceStyle = 'otbs',
          },
        }
      })
    else
      require('lspconfig')[server].setup({})
    end
  end
})
EOF
'''
# }}}

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# hook_source {{{
hook_source = '''
lua << EOF
require('colorizer').setup()
EOF
'''
# }}}

[[plugins]]
repo = 'prabirshrestha/vim-lsp'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
if = "0"
# hook_add {{{
hook_add = '''
let g:lsp_diagnostics_signs_warning = { 'text': " " }
let g:lsp_diagnostics_signs_error = { 'text': " " }
" let g:lsp_completion_resolve_timeout = 1000
"
function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes
  nmap <silent> <Leader>rn <Plug>(lsp-rename)
  nmap <silent> <Leader>h <Plug>(lsp-hover)
  nmap <silent> <Leader>ca <Plug>(lsp-code-action)
  nmap <silent> gd <Plug>(lsp-definition)
  nmap <silent> gy <Plug>(lsp-type-definition)
  nmap <silent> gi <Plug>(lsp-implementation)
  nmap <silent> gr <Plug>(lsp-references)
  nmap <silent> F <Plug>(lsp-document-format)
  vmap <silent> F <Plug>(lsp-document-range-format)
endfunction
augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END
'''
# }}}

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = 'vim-lsp'
if = "0"
