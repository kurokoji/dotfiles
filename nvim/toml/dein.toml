[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
# hook_add {{{
hook_add = """
let g:DevIconsEnableDistro = v:false
"""
# }}}

[[plugins]]
repo = 'josa42/nvim-lightline-lsp'

[[plugins]]
repo = 'itchyny/lightline.vim'
# hook_add {{{
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'dayfox',
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste', 'lsp_info', 'lsp_hints', 'lsp_errors', 'lsp_warnings', 'lsp_ok', 'lsp_status'],
      \     ['fugitive', 'gitstatus'],
      \     ['filename'],
      \   ],
      \   'right': [
      \     ['lineinfo', 'percent'],
      \     ['charcode', 'filetype', 'fileencoding', 'fileformaticon'],
      \   ]
      \ },
      \ 'inactive': {
      \   'left': [
      \     ['filename']
      \   ],
      \   'right':[
      \     ['fileformaticon'],
      \     ['charcode', 'fileencoding'],
      \   ]
      \ },
      \ 'tabline': {
      \   'left': [
      \     ['vim_icon', 'tabs'],
      \   ],
      \   'right': [
      \     ['duck_icon']
      \   ]
      \ },
      \ 'tab': {
      \   'active': ['tabnum', 'filename', 'modified'],
      \   'inactive': ['tabnum']
      \ },
      \ 'tab_component_function': {
      \   'modified': 'lightline#tab#modified',
      \   'readonly': 'lightline#tab#readonly',
      \   'tabnum': 'lightline#tab#tabnum',
      \   'fileicon': 'WebDevIconsGetFileTypeSymbol'
      \ },
      \ 'component': {
      \   'lambda_icon': 'ﬦ',
      \   'duck_icon': '',
      \   'vim_icon': '',
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileicon': 'WebDevIconsGetFileTypeSymbol',
      \   'fileformaticon': 'WebDevIconsGetFileFormatSymbol',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'syntastic': 'SyntasticStatuslineFlag',
      \   'charcode': 'MyCharCode',
      \   'gitstatus': 'MyGitStatus',
      \ },
      \ 'component_expand': {
      \   'lsp_warnings': 'lightline#lsp#warnings',
      \   'lsp_errors': 'lightline#lsp#errors',
      \   'lsp_info': 'lightline#lsp#info',
      \   'lsp_hints': 'lightline#lsp#hints',
      \   'lsp_ok': 'lightline#lsp#ok',
      \   'status': 'lightline#lsp#status',
      \ },
      \ 'component_type': {
      \   'lsp_warnings': 'warning',
      \   'lsp_errors': 'error',
      \   'lsp_info': 'info',
      \   'lsp_hints': 'hints',
      \   'lsp_ok': 'left',
      \ },
      \ 'separator': {'left': '', 'right': ''},
      \ 'subseparator': {'left': '', 'right': ''}
      \ }


function! s:trim(str)
  if exists('*trim')
    return trim(a:str)
  endif
  return substitute(a:str, '\s\+$', '', '')
endfunction

function! MyGitStatus() abort
  return get(b:,'gitsigns_status','')
endfunction

function! MyTabFileName(n) abort
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)

  let filename_local = expand('#' . buflist[winnr - 1] . ':t')
  let filename_full = expand('#' . buflist[winnr - 1] . ':p')

  return WebDevIconsGetFileTypeSymbol(filename_full) . ' ' . (filename_local !=# '' ? filename_local : '[No Name]')
endfunction

function! MyFileicon()
  return WebDevIconsGetFileTypeSymbol()
endfunction

function! MyGetLineInfo()
  if winwidth(0) <= 60
    return ""
  endif
  " return printf("\ue0a1 %3d:%-3d", line('.'), col('.'))
  return printf("%3d:%-3d \uf77a %3d%%", line('.'), col('.'), 100 * line('.') / line('$'))
endfunction

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? "\ue0a2" : ''
endfunction

function! MyFilename()
  if winwidth(0) <= 45
    return ""
  endif

  return expand('%:t') != '' ? expand('%:t') : '[No Name]'
endfunction

function! MyFugitive()
  if winwidth(0) <= 120
    return ""
  endif

  try
    if exists('*FugitiveHead')
      let branch = FugitiveHead()

      return branch !=# '' ? ' ' . branch : ''
    endif
  catch
  endtry

  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 100 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 100 ? (strlen(&filetype) ?  WebDevIconsGetFileTypeSymbol() . ' ' . &filetype : '') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 100 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return &ft == 'unite' ? 'Unite' :
        \ &ft == 'nerdtree' ? 'NERDTree' :
        \ &ft == 'ddu' ? 'Defx' :
        \ &ft == 'deol' ? 'Deol' :
        \ lightline#mode()
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
  if winwidth(0) <= 120
    return ''
  endif

  " Get the output of :ascii
  redir => ascii
  silent! ascii
  redir END

  if match(ascii, 'NUL') != -1
    return 'NUL'
  endif

  " Zero pad hex values
  let nrformat = '0x%02x'

  let encoding = (&fenc == '' ? &enc : &fenc)

  if encoding == 'utf-8'
    " Zero pad with 4 zeroes in unicode files
    let nrformat = '0x%04x'
  endif

  " Get the character and the numeric value from the return value of :ascii
  " This matches the two first pieces of the return value, e.g.
  " "<F>  70" => char: 'F', nr: '70'
  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

  " Format the numeric value
  let nr = printf(nrformat, nr)

  return "'". char ."' ". nr
endfunction
'''
# }}}

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
# hook_add {{{
hook_add = '''
let g:sonictemplate_vim_template_dir = [
      \ '~/.config/nvim/template'
      \]
'''
# }}}

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
# hook_add {{{
hook_add = '''
let g:precious_enable_switchers = {
      \ 'javascript': {
      \   'setfiletype': 0
      \ }
      \ }
'''
# }}}

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
# hook_add {{{
hook_add = '''
let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'denite', 'defx', 'help']
'''
# }}}

[[plugins]]
repo = 'luochen1990/rainbow'
# hook_add {{{
hook_add = '''
let g:rainbow_active = 1
let g:rainbow_conf = {
\  'separately': {
\    'sml': {
\      'parentheses': ['start=/(\ze[^*]/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold']
\  }}
\}
'''
# }}}

[[plugins]]
repo = 'thinca/vim-quickrun'
# hook_add {{{
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_no_default_key_mappings=1

let g:quickrun_config._ = {
      \ 'runner': 'nvimterm',
      \ 'runner/nvimterm/into': 1,
      \ 'runner/nvimterm/opener': 'auto',
      \ 'runner/nvimterm/vsplit_width': 150,
      \ }

let g:quickrun_config.d = {
      \ 'command': 'dmd',
      \ 'cmdopt': '-debug -run'
      \ }

let g:quickrun_config.cpp = {
      \ 'command': 'g++',
      \ 'cmdopt': '-std=c++2a -O3'
      \ }

let g:quickrun_config.scheme = {
      \ 'command': 'scheme',
      \ 'exec': '%c %o < %s',
      \ 'cmdopt': '--quiet'
      \ }

nnoremap <silent> <C-b> <Cmd>QuickRun<CR> i
'''
# }}}

[[plugins]]
repo = 'statiolake/vim-quickrun-runner-nvimterm'
if = 'has("nvim")'

# vim-fakeclipはxclip無いとneovimが死ぬ
[[plugins]]
repo = 'kurokoji/vim-fakeclip'
# hook_add {{{
hook_add = '''
vnoremap <silent> <C-y> <Plug>(fakeclip-y)
'''
# }}}

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
if = 'has("nvim")'

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
