[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'wsdjeg/dein-ui.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'kurokoji/vim-devicons'
# hook_add {{{
hook_add = """
let g:WebDevIconsOS = 'Ubuntu'
let g:webdevicons_enable = 1
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
let g:webdevicons_enable_denite = 1
"""
# }}}

[[plugins]]
repo = 'itchyny/lightline.vim'
# hook_add {{{
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'iceberg',
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste'],
      \     ['filename', 'cocstatus', 'fugitive', 'gitgutter'],
      \   ],
      \   'right': [
      \     ['lineinfo', 'syntastic'],
      \     ['fileformat'],
      \     ['charcode', 'fileencoding'],
      \   ]
      \ },
      \ 'inactive': {
      \   'left': [
      \     ['filename']
      \   ],
      \   'right':[
      \     ['fileformat'],
      \     ['charcode', 'fileencoding'],
      \   ]
      \ },
      \ 'tabline': {
      \   'left': [
      \     ['tabs']
      \   ],
      \   'right': [
      \     ['close']
      \   ]
      \ },
      \ 'tab': {
      \   'active': ['tabnum', 'filename', 'modified'],
      \   'inactive': ['tabnum', 'filename', 'modified']
      \ },
      \ 'tab_component_function': {
      \   'filename': 'MyTabFileName',
      \   'modified': 'lightline#tab#modified',
      \   'readonly': 'lightline#tab#readonly',
      \   'tabnum': 'lightline#tab#tabnum',
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'syntastic': 'SyntasticStatuslineFlag',
      \   'charcode': 'MyCharCode',
      \   'gitgutter': 'MyGitGutter',
      \   'ale': 'MyGetALEStatus',
      \   'cocstatus': 'MyCocStatus'
      \ },
      \ }

" let g:lightline.component = { 'lineinfo': "\ue0a1 %3l:%3v \ue0a3" }
let g:lightline.component = { 'lineinfo': '%{MyGetLineInfo()}' }

function! s:trim(str)
  if exists('*trim')
    return trim(a:str)
  endif
  return substitute(a:str, '\s\+$', '', '')
endfunction

function! MyTabFileName(n) abort
  let buflist = tabpagebuflist(a:n)
  let winnr = tabpagewinnr(a:n)

  let filename_local = expand('#' . buflist[winnr - 1] . ':t')
  let filename_full = expand('#' . buflist[winnr - 1] . ':p')

  return WebDevIconsGetFileTypeSymbol(filename_full) . ' ' . (filename_local !=# '' ? filename_local : '[No Name]')
endfunction

function! MyCocStatus() abort
  let info = get(b:, 'coc_diagnostic_info', {})
  let msgs = []
  if get(info, 'error', 0)
    call add(msgs, "\uf05e " . info['error'])
  endif
  if get(info, 'warning', 0)
    call add(msgs, "\uf525 " . info['warning'])
  endif
  return s:trim(join(msgs, ' ') . ' ' . get(g:, 'coc_status', ''))
endfunction

function! MyFileicon()
  return WebDevIconsGetFileTypeSymbol()
endfunction

function! MyGetLineInfo()
  if winwidth(0) <= 60
    return ""
  endif
  " return printf("\ue0a1 %3d:%-3d", line('.'), col('.'))
  return printf("%3d:%-3d \uf77a %3d%%", line('.'), col('.'), 100 * line('.') / line('$'))
endfunction

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyGetALEStatus()
  if !has('nvim') || winwidth(0) <= 60
    return ""
  endif


  let w_c = LC_warning_count()
  let e_c = LC_error_count()

  if w_c == '' && e_c == ''
    return "\uf00c" . " OK"
  elseif w_c == ''
    return e_c
  elseif e_c == ''
    return w_c
  else
    return printf("%s %s", w_c, e_c)
  endif

  "return ALEGetStatusLine()
endfunction

function! LC_warning_count()
  let current_buf_number = bufnr('%')
  let qflist = getqflist()
  let current_buf_diagnostics = filter(qflist, {index, dict -> dict['bufnr'] == current_buf_number && dict['type'] == 'W'})
  let count = len(current_buf_diagnostics)
  return count > 0 && g:LanguageClient_loaded ? "\uf071 " . count : ''
endfunction

function! LC_error_count()
  let current_buf_number = bufnr('%')
  let qflist = getqflist()
  let current_buf_diagnostics = filter(qflist, {index, dict -> dict['bufnr'] == current_buf_number && dict['type'] == 'E'})
  let count = len(current_buf_diagnostics)
  return count > 0 && g:LanguageClient_loaded ? "\uf05e " . count : ''
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? "\ue0a2" : ''
endfunction

function! MyFilename()
  if winwidth(0) <= 45
    return ""
  endif

  if &ft == 'nerdtree'
    return ""
  endif

  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? printf('[%s %s]', WebDevIconsGetFileTypeSymbol(), &ft) . ' ' . expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  if winwidth(0) <= 120
    return ""
  endif

  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? "\ue0a0 "._ : ''
      " return strlen(_) ? "\ue702 "._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 100 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 100 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 100 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return &ft == 'unite' ? 'Unite' :
        \ &ft == 'nerdtree' ? 'NERDTree' :
        \ &ft == 'defx' ? 'Defx' :
        \ &ft == 'deol' ? 'Deol' :
        \ lightline#mode()
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth(0) <= 120
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
  if winwidth(0) <= 120
    return ''
  endif

  " Get the output of :ascii
  redir => ascii
  silent! ascii
  redir END

  if match(ascii, 'NUL') != -1
    return 'NUL'
  endif

  " Zero pad hex values
  let nrformat = '0x%02x'

  let encoding = (&fenc == '' ? &enc : &fenc)

  if encoding == 'utf-8'
    " Zero pad with 4 zeroes in unicode files
    let nrformat = '0x%04x'
  endif

  " Get the character and the numeric value from the return value of :ascii
  " This matches the two first pieces of the return value, e.g.
  " "<F>  70" => char: 'F', nr: '70'
  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

  " Format the numeric value
  let nr = printf(nrformat, nr)

  return "'". char ."' ". nr
endfunction
'''
# }}}

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
# hook_add {{{
hook_add = '''
let g:sonictemplate_vim_template_dir = [
      \ '~/.config/nvim/template'
      \]
'''
# }}}

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
# hook_add {{{
hook_add = '''
let g:precious_enable_switchers = {
      \ 'javascript': {
      \   'setfiletype': 0
      \ }
      \ }
'''
# }}}

[[plugins]]
repo = 'ntpeters/vim-better-whitespace'
# hook_add {{{
hook_add = '''
let g:better_whitespace_filetypes_blacklist=['diff', 'gitcommit', 'denite', 'defx', 'help']
'''
# }}}

[[plugins]]
repo = 'neoclide/coc.nvim'
if = '0'
# merge = 0
# on_i = 1
rev = 'release'
# hook_add {{{
hook_add = '''

let g:coc_global_extensions=['coc-powershell', '@yaegassy/coc-pylsp', 'coc-json', 'coc-go', 'coc-dlang', 'coc-clangd', 'coc-explorer', 'coc-snippets', 'coc-tsserver']

set updatetime=100
set signcolumn=yes

" coc-snippets {{{
" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<c-j>'

inoremap <silent><expr> <C-k>
      \ pumvisible() ? coc#_select_confirm() :
      \ coc#expandableOrJumpable() ? "\<C-r>=coc#rpc#request('doKeymap', ['snippets-expand-jump',''])\<CR>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

let g:coc_snippet_next = '<c-k>'
" }}}
" coc-explorer {{{

let g:coc_explorer_global_presets = {
\   '.vim': {
\     'root-uri': '~/.vim',
\   },
\   'cocConfig': {
\      'root-uri': '~/.config/coc',
\   },
\   'tab': {
\     'position': 'tab',
\     'quit-on-open': v:true,
\   },
\   'tab:$': {
\     'position': 'tab:$',
\     'quit-on-open': v:true,
\   },
\   'floating': {
\     'position': 'floating',
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingTop': {
\     'position': 'floating',
\     'floating-position': 'center-top',
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingLeftside': {
\     'position': 'floating',
\     'floating-position': 'left-center',
\     'floating-width': 50,
\     'open-action-strategy': 'sourceWindow',
\   },
\   'floatingRightside': {
\     'position': 'floating',
\     'floating-position': 'right-center',
\     'floating-width': 50,
\     'open-action-strategy': 'sourceWindow',
\   },
\   'simplify': {
\     'file-child-template': '[selection | clip | 1] [indent][icon | 1] [filename omitCenter 1]'
\   },
\   'buffer': {
\     'sources': [{'name': 'buffer', 'expand': v:true}]
\   },
\ }
nmap <silent> <Leader>e <Cmd>CocCommand explorer --toggle --preset floating<CR>

" }}}

function! s:show_docmentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <silent> <Leader>rn <Plug>(coc-rename)

nmap <silent> [c <Plug>(coc-diagnostic-prev)
nmap <silent> ]c <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" "nnoremap <silent> K :call CocAction('doHover')<CR>
nnoremap <silent> K :call <SID>show_docmentation()<CR>
nnoremap <silent> F :call CocAction('format')<CR>



autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
'''
# }}}

[[plugins]]
repo = 'jiangmiao/auto-pairs'

[[plugins]]
repo = 'RRethy/vim-hexokinase'
build = 'make hexokinase'
# hook_add {{{
hook_add = '''
let g:Hexokinase_highlighters = ['virtual']
'''
# }}}

[[plugins]]
repo = 'luochen1990/rainbow'
# hook_add {{{
hook_add = '''
let g:rainbow_active = 1
let g:rainbow_conf = {
\  'separately': {
\    'sml': {
\      'parentheses': ['start=/(\ze[^*]/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold']
\  }}
\}
'''
# }}}

[[plugins]]
repo = 'thinca/vim-quickrun'
# hook_add {{{
hook_add = '''
let g:quickrun_config = get(g:, 'quickrun_config', {})
let g:quickrun_no_default_key_mappings=1

let g:quickrun_config._ = {
      \ 'runner': 'nvimterm',
      \ 'runner/nvimterm/into': 1
      \ }

let g:quickrun_config.d = {
      \ 'command': 'dmd',
      \ 'cmdopt': '-run'
      \ }

let g:quickrun_config.cpp = {
      \ 'command': 'g++',
      \ 'cmdopt': '-std=c++2a -O3'
      \ }

let g:quickrun_config.scheme = {
      \ 'command': 'scheme',
      \ 'exec': '%c %o < %s',
      \ 'cmdopt': '--quiet'
      \ }

nnoremap <silent> <C-b> <Cmd>QuickRun<CR> i
'''
# }}}

[[plugins]]
repo = 'statiolake/vim-quickrun-runner-nvimterm'

# vim-fakeclipはxclip無いとneovimが死ぬ
[[plugins]]
repo = 'kurokoji/vim-fakeclip'
# hook_add {{{
hook_add = '''
vnoremap <silent> <C-y> "+Y
'''
# }}}

[[plugins]]
repo = 'tyru/open-browser.vim'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'

[[plugins]]
repo = 'kyazdani42/nvim-web-devicons'

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
if = '0'
# hook_add {{{
hook_add = '''
lua << EOF
require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {},
    always_divide_middle = true,
    globalstatus = false,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'filetype', 'filename'},
    lualine_c = {'branch', 'diff', 'diagnostics'},
    lualine_x = {'encoding', 'fileformat'},
    lualine_y = {'location'},
    lualine_z = {'progress'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {
    lualine_a = {'tabs', 'filename'},
    lualine_b = {},
    lualine_c = {},
    lualine_x = {},
    lualine_y = {},
    lualine_z = {}
  },
  extensions = {}
}
EOF
'''
# }}}

[[plugins]]
repo = 'editorconfig/editorconfig-vim'
