[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
# hook_add {{{
hook_add = """
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
"""
# }}}

[[plugins]]
repo = 'itchyny/lightline.vim'
# hook_add {{{
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'seoul256',
      \ 'mode_map': {'c': 'NORMAL'},
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste'],
      \     ['fugitive', 'gitgutter', 'filename', 'ale'],
      \   ],
      \   'right': [
      \     ['lineinfo', 'syntastic'],
      \     ['percent'],
      \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
      \   ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'syntastic': 'SyntasticStatuslineFlag',
      \   'charcode': 'MyCharCode',
      \   'gitgutter': 'MyGitGutter',
"      \   'ale': 'ALEGetStatusLine'
      \   'ale': 'MyGetALEStatus',
      \ },
"  \  vim-powerline
"  \ 'separator': {'left': "\u2b80", 'right': "\u2b82"},
"  \ 'subseparator': {'left': "\u2b81", 'right': "\u2b83"}
"  \  Powerline
      \ 'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
      \ 'subseparator': {'left': "\ue0b1", 'right': "\ue0b3"}
"  \  Cica
"      \ 'separator': {'left': '', 'right': ''},
"      \ 'subseparator': {'left': '', 'right': ''}
      \ }

" let g:lightline.component = { 'lineinfo': " %3l:%3v " }
" let g:lightline.component = { 'lineinfo': "\ue0a1 %3l:%3v \ue0a3" }
let g:lightline.component = { 'lineinfo': '%{MyGetLineInfo()}' }

function! MyGetLineInfo()
  if winwidth(0) <= 60
    return ""
  endif
  return printf("\ue0a1 %3d:%-3d \ue0a3", line('.'), col('.'))
endfunction

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyGetALEStatus()
  if winwidth(0) <= 60
    return ""
  endif

  return ALEGetStatusLine()
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? "\u2b64" : ''
"  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? "\ue0a2" : ''
endfunction

function! MyFilename()
  if winwidth(0) <= 45
    return ""
  endif

  if &ft == 'nerdtree'
    return ""
  endif

  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  if winwidth(0) <= 40
    return ""
  endif

  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? "\u2b60 "._ : ''
"      return strlen(_) ? "\ue0a0 "._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 100 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 100 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 100 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return &ft == 'unite' ? 'Unite' :
      \ &ft == 'nerdtree' ? 'NERDTree' :
      \ lightline#mode()
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth(0) <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
  if winwidth(0) <= 90
    return ''
  endif

  " Get the output of :ascii
  redir => ascii
  silent! ascii
  redir END

  if match(ascii, 'NUL') != -1
    return 'NUL'
  endif

  " Zero pad hex values
  let nrformat = '0x%02x'

  let encoding = (&fenc == '' ? &enc : &fenc)

  if encoding == 'utf-8'
    " Zero pad with 4 zeroes in unicode files
    let nrformat = '0x%04x'
  endif

  " Get the character and the numeric value from the return value of :ascii
  " This matches the two first pieces of the return value, e.g.
  " "<F>  70" => char: 'F', nr: '70'
  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

  " Format the numeric value
  let nr = printf(nrformat, nr)

  return "'". char ."' ". nr
endfunction
'''
# }}}

[[plugins]]
repo = 'scrooloose/nerdtree'
# hook_add {{{
hook_add = '''
let g:NERDTreeShowBookmarks=1
let g:NERDTreeDirArrows = 1
" let g:NERDTreeDirArrowExpandable = '▸'
" let g:NERDTreeDirArrowCollapsible = '▾'

nnoremap <silent><C-b> :NERDTreeToggle<CR>
if !has("gui_vimr")
" Here goes some VimR specific settings like
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
endif
nnoremap <silent><C-e> :NERDTreeToggle<CR>
'''
# }}}

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
# hook_add {{{
hook_add = '''
let g:sonictemplate_vim_template_dir = [
      \ '~/.config/nvim/template'
      \]
'''
# }}}

[[plugins]]
repo = 'Yggdroot/indentLine'
# hook_add {{{
hook_add = '''
let g:indentLine_color_term = 239
set conceallevel=0
let g:vim_json_syntax_conceal = 0
'''
# }}}

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'szw/vim-tags'

[[plugins]]
repo = "Shougo/vinarise.vim"

[[plugins]]
repo = 'Shougo/denite.nvim'
# hook_add {{{
hook_add = '''
call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
noremap <C-p> :Denite buffer<CR>
noremap <C-n> :Denite -buffer-name=file file<CR>
'''
# }}}

[[plugins]]
repo = 'w0rp/ale'
# hook_add {{{
hook_add = '''
let g:ale_open_list = 0
let g:ale_lint_on_enter = 0
" let g:ale_lint_on_text_changed = 0
" let g:ale_lint_on_insert_leave = 1
let g:ale_sign_column_always = 1

let g:ale_statusline_format = ['✖︎ %d', '⚠ %d', '⬥ ok']
let g:ale_sign_error = '✖︎'
let g:ale_sign_warning = '⚠'
let g:ale_linters = {
      \ 'cpp': ['clang'],
      \ }
let g:ale_cpp_clang_executable = 'clang++'
let g:ale_cpp_clang_options = '-std=c++1z'
'''
#}}}
# hook_post_source {{{
hook_post_source = '''
'''
# }}}

[[plugins]]
repo = 'thinca/vim-zenspace'

[[plugins]]
repo = 'twitvim/twitvim'
# hook_source {{{
hook_source = '''
let twitvim_browser_cmd = 'open'
let twitvim_force_ssl = 1 
let twitvim_count = 40
'''
# }}}

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
build = './install.sh'
on_ft = ['rust']
# hook_source {{{
hook_source = '''
set hidden
let g:LanguageClient_serverCommands = {
      \ 'rust': ['rustup', 'run', 'nightly', 'rls']
      \ }
let g:LanguageClient_autoStart = 1
'''
# }}}
