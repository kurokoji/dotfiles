[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cohama/lexima.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = "!has('nvim')"

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = "!has('nvim')"

[[plugins]]
repo = 'ryanoasis/vim-devicons'
# hook_add {{{
hook_add = """
let g:WebDevIconsOS = 'Darwin'
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
"""
# }}}

[[plugins]]
repo = 'itchyny/lightline.vim'
# hook_add {{{
hook_add = '''
let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'mode_map': {'c': 'NORMAL'},
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste'],
      \     ['fugitive', 'gitgutter', 'filename', 'ale'],
      \   ],
      \   'right': [
      \     ['lineinfo', 'syntastic'],
      \     ['percent'],
      \     ['charcode', 'fileformat', 'fileencoding', 'filetype'],
      \   ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \   'syntastic': 'SyntasticStatuslineFlag',
      \   'charcode': 'MyCharCode',
      \   'gitgutter': 'MyGitGutter',
"      \   'ale': 'ALEGetStatusLine'
"      \   'ale': 'MyGetALEStatus',
      \ },
"  \  Powerline
      \ 'separator': {'left': "\ue0b0", 'right': "\ue0b2"},
      \ 'subseparator': {'left': "\ue0b1", 'right': "\ue0b3"}
      \ }

" let g:lightline.component = { 'lineinfo': "\ue0a1 %3l:%3v \ue0a3" }
let g:lightline.component = { 'lineinfo': '%{MyGetLineInfo()}' }

function! MyGetLineInfo()
  if winwidth(0) <= 60
    return ""
  endif
  return printf("\ue0a1 %3d:%-3d", line('.'), col('.'))
endfunction

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyGetALEStatus()
  if winwidth(0) <= 60
    return ""
  endif

  return ALEGetStatusLine()
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &ro ? "\u2b64" : ''
endfunction

function! MyFilename()
  if winwidth(0) <= 45
    return ""
  endif

  if &ft == 'nerdtree'
    return ""
  endif

  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'unite' ? unite#get_status_string() :
        \  &ft == 'vimshell' ? substitute(b:vimshell.current_dir,expand('~'),'~','') :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  if winwidth(0) <= 40
    return ""
  endif

  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      let _ = fugitive#head()
      return strlen(_) ? "\u2b60 "._ : ''
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 100 ? (&fileformat . ' ' . WebDevIconsGetFileFormatSymbol()) : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 100 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 100 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return &ft == 'unite' ? 'Unite' :
        \ &ft == 'nerdtree' ? 'NERDTree' :
        \ lightline#mode()
endfunction

function! MyGitGutter()
  if ! exists('*GitGutterGetHunkSummary')
        \ || ! get(g:, 'gitgutter_enabled', 0)
        \ || winwidth(0) <= 90
    return ''
  endif
  let symbols = [
        \ g:gitgutter_sign_added . ' ',
        \ g:gitgutter_sign_modified . ' ',
        \ g:gitgutter_sign_removed . ' '
        \ ]
  let hunks = GitGutterGetHunkSummary()
  let ret = []
  for i in [0, 1, 2]
    if hunks[i] > 0
      call add(ret, symbols[i] . hunks[i])
    endif
  endfor
  return join(ret, ' ')
endfunction

" https://github.com/Lokaltog/vim-powerline/blob/develop/autoload/Powerline/Functions.vim
function! MyCharCode()
  if winwidth(0) <= 90
    return ''
  endif

  " Get the output of :ascii
  redir => ascii
  silent! ascii
  redir END

  if match(ascii, 'NUL') != -1
    return 'NUL'
  endif

  " Zero pad hex values
  let nrformat = '0x%02x'

  let encoding = (&fenc == '' ? &enc : &fenc)

  if encoding == 'utf-8'
    " Zero pad with 4 zeroes in unicode files
    let nrformat = '0x%04x'
  endif

  " Get the character and the numeric value from the return value of :ascii
  " This matches the two first pieces of the return value, e.g.
  " "<F>  70" => char: 'F', nr: '70'
  let [str, char, nr; rest] = matchlist(ascii, '\v\<(.{-1,})\>\s*([0-9]+)')

  " Format the numeric value
  let nr = printf(nrformat, nr)

  return "'". char ."' ". nr
endfunction
'''
# }}}

[[plugins]]
repo = 'scrooloose/nerdtree'
# hook_add {{{
hook_add = '''
let g:NERDTreeShowBookmarks = 1
let g:NERDTreeDirArrows = 1
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'

nnoremap <silent><C-b> :NERDTreeToggle<CR>
" if !has("gui_vimr") && !exists("g:gui_oni")
  " Here goes some VimR specific settings like
"  autocmd StdinReadPre * let s:std_in=1
"  autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"endif
'''
# }}}

[[plugins]]
repo = 'Yggdroot/indentLine'
# hook_add {{{
hook_add = '''
let g:indentLine_color_term = 239
'''
# }}}

[[plugins]]
repo = 'airblade/vim-gitgutter'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
# hook_add {{{
hook_add = '''
let g:sonictemplate_vim_template_dir = [
      \ '~/.config/nvim/template'
      \]
'''
# }}}

[[plugins]]
repo = 'simeji/winresizer'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
depends = ['context_filetype.vim']
# hook_add {{{
hook_add = '''
let g:deoplete#enable_at_startup = 1
'''
# }}}

[[plugins]]
repo = 'Shougo/neoinclude.vim'
on_ft = ['c', 'cpp', 'd']
# hook_add {{{
hook_add = '''
let g:neoinclude#paths = {
      \ 'd': '.,/usr/local/opt/dmd/include/dlang/dmd',
      \ 'cpp': '.,/usr/local/opt/llvm/include/c++/v1,/usr/local/opt/opencv/include,/usr/local/opt/boost/include,/usr/local/opt/zbar/include/zbar,/usr/local/opt/zbar/include'
      \ }

if !exists('g:neoinclude#reverse_exprs')
  let g:neoinclude#reverse_exprs = {}
endif

" let g:neoinclude#reverse_exprs.d = 'substitute(substitute(v:fname, "\\.", "/", "g"), "$", ".d", "")'
let g:neoinclude#reverse_exprs.d = 'fnamemodify(substitute(substitute(v:fname, "/", "\\.", "g"), "\\.\d", "", "g"), "r")'

if !exists('g:neoinclude#exts')
  let g:neoinclude#exts = {}
endif

"let g:neoinclude#exts.d = ['', 'd']

"let g:neoinclude#patterns = {
"      \ 'd': '^\s*\%(\%(public\|static\)\s\+\)\?\<import'
"      \ }
'''
# }}}

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
rev = 'next'
depends = ['deoplete.nvim']
build = 'bash install.sh'
# hook_add {{{
hook_add = '''
set hidden
let g:LanguageClient_serverCommands = {
      \ 'cpp': ['clangd'],
      \ 'rust': ['rustup', 'run', 'nightly', 'rls'],
      \ 'd': ['~/.dub/packages/.bin/dls'],
      \ 'javascript': ['javascript-typescript-stdio'],
      \ 'python': ['pyls'],
      \ 'ruby': ['solargraph'],
      \ }
let g:LanguageClient_loadSettings = 1

nnoremap K :call LanguageClient#textDocument_hover()<CR>
nnoremap gd :call LanguageClient#textDocument_definition()<CR>
nnoremap F :call LanguageClient#textDocument_formatting()<CR>
'''
# }}}
# hook_source {{{
hook_source = '''
set completefunc=LanguageClient#complete
'''
# }}}

[[plugins]]
repo = 'Shougo/denite.nvim'
# hook_add {{{
hook_add = '''
nmap <silent> <C-u><C-n> :<C-u>Denite buffer<CR>
nmap <silent> <C-u><C-p> :<C-u>Denite -resume -buffer-name=files file_rec<CR>
nmap <silent> <C-u><C-g> :<C-u>Denite grep<CR>
nmap <silent> <C-u><C-]> :<C-u>DeniteCursorWord grep<CR>

call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
call denite#custom#map('_', '<C-h>', '<denite:do_action:split>')
call denite#custom#map('insert', '<C-h>', '<denite:do_action:split>')
call denite#custom#map('_', '<C-v>', '<denite:do_action:vsplit>')
call denite#custom#map('insert', '<C-v>', '<denite:do_action:vsplit>')

call denite#custom#var('file_rec', 'command', ['rg', '--files', '--glob', '!.git'])
call denite#custom#var('grep', 'command', ['rg', '--threads', '3'])
call denite#custom#var('grep', 'recursive_opts', [])
call denite#custom#var('grep', 'pattern_opt', [])
call denite#custom#var('grep', 'default_opts', ['--vimgrep', '--no-heading'])
'''
# }}}
# hook_post_source {{{
hook_post_source = '''
'''

# }}}

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = 'vim'

[[plugins]]
repo = 'Shougo/neco-syntax'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
depends = ['neosnippet-snippets', 'context_filetype.vim']
# hook_add {{{
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)
'''
# }}}

[[plugins]]
repo = 'kurokoji/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/defx.nvim'
# hook_add {{{
hook_add = '''
nnoremap <silent> df :<C-u>Defx<CR>
'''
# }}}
# hook_source {{{
hook_source = '''
autocmd MyAutoCmd FileType defx call s:defx_my_settings()
function! s:defx_my_settings() abort
  " Define mappings
  nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
  nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
  nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
  nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
  nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
  nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
  nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
  nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
  nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
  nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
  nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
  nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
  nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
  nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
endfunction
'''
# }}}
