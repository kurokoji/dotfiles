[[plugins]]
repo = 'Shougo/ddc.vim'
depends = ['context_filetype.vim', 'denops.vim', 'pum.vim']
on_event = ['InsertEnter', 'CursorHold', 'BufRead', 'BufNewFile', 'BufEnter']
# hook_add {{{
hook_add = '''
'''
# }}}
# hook_source {{{
hook_source = '''
call ddc#custom#patch_global(#{
      \   ui: 'pum',
      \   sources: ['copilot', 'nvim-lsp', 'neosnippet', 'around', 'buffer', 'file'],
      \   sourceOptions: #{
      \     _: #{
      \       matchers: ['matcher_head'],
      \       sorters: ['sorter_rank']
      \     },
      \     around: #{
      \       mark: '﬘',
      \     },
      \     necovim: #{
      \       mark: '',
      \     },
      \     cmdline: #{
      \       mark: '',
      \     },
      \     vim-lsp: #{
      \       matchers: ['matcher_head'],
      \       mark: '',
      \       forceCompletionPattern: '\.\w*|:\w*|->\w*'
      \     },
      \     nvim-lsp: #{
      \       matchers: ['matcher_head'],
      \       mark: '',
      \       forceCompletionPattern: '\.\w*|:\w*|->\w*'
      \     },
      \     file: #{
      \       mark: '',
      \       isVolatile: v:true,
      \       forceCompletionPattern: '\S/\S*'
      \     },
      \     skkeleton: #{
      \       mark: 'Skkeleton',
      \       matchers: ['skkeleton'],
      \       sorters: [],
      \       minAutoCompleteLength: 2,
      \     },
      \     neosnippet: #{
      \       mark: 'ﴨ',
      \     },
      \     tabnine: #{
      \       mark: 'ﮧ',
      \       isVolatile: v:true,
      \     },
      \     buffer: #{
      \       mark: '﬘',
      \     },
      \     copilot: #{
      \       mark: 'ﮧ',
      \       matchers: [],
      \       minAutoCompleteLength: 0,
      \     },
      \   },
      \   sourceParams: #{
      \     around: #{
      \       maxSize: 500,
      \     },
      \     path: #{
      \       cmd: ['find', '-maxdepth', '5']
      \     },
      \     buffer: #{
      \       requireSameFiletype: v:false,
      \       limitBytes: 5000000,
      \       fromAltBuf: v:true,
      \       forceCollect: v:true,
      \     },
      \   }
      \ })

call ddc#custom#patch_global('autoCompleteEvents', [
    \ 'InsertEnter', 'TextChangedI', 'TextChangedP', 'CmdlineChanged',
    \ ])

nnoremap : <Cmd>call CommandlinePre()<CR>:
nnoremap ; <Cmd>call CommandlinePre()<CR>:

function! CommandlinePre() abort
  " Note: It disables default command line completion!
  cnoremap <Tab>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
  cnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
  cnoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
  cnoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
  " cnoremap <silent><expr> <Enter>
  "       \ pum#visible() ? '<Cmd>call pum#map#confirm()<CR>' :
  "       \ '<Enter>'

  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  call ddc#custom#patch_buffer('cmdlineSources',
          \ ['cmdline', 'file'])

  " call ddc#custom#patch_global('ui', 'inline')

  autocmd User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd InsertEnter <buffer> ++once call CommandlinePost()

  " Enable command line completion
  call ddc#enable_cmdline_completion()
  call ddc#enable()
endfunction

function! CommandlinePost() abort
  silent! cunmap <Tab>
  silent! cunmap <S-Tab>
  silent! cunmap <C-n>
  silent! cunmap <C-p>
  silent! cunmap <C-y>
  silent! cunmap <C-e>
  silent! cunmap <Enter>

  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
endfunction

call ddc#enable()
'''
# }}}

[[plugins]]
repo = 'matsui54/denops-popup-preview.vim'
on_source = 'ddc.vim'
# hook_source {{{
hook_source = '''
" hi! PopupPreviewDocument ctermbg=NONE guibg=NONE gui=NONE
" hi! PopupPreviewBorder ctermbg=NONE guibg=NONE gui=NONE
call popup_preview#enable()
'''
# }}}

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/pum.vim'
on_source = 'ddc.vim'
# hook_source {{{
hook_source = '''
call pum#set_option('max_width', 80)
call pum#set_option('padding', v:true)
" call pum#set_option('border', ['╭', '─', '╮', '│', '╯', '─', '╰', '│'])
call pum#set_option('border', ['┏', '━', '┓', '┃', '┛', '━', '┗', '┃'])
call pum#set_option('highlight_normal_menu', '')
call pum#set_option('scrollbar_char', '')
" call pum#set_option('scrollbar_char', '┃')
" call pum#set_option('scrollbar_char', '█')

inoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>
inoremap <C-e>   <Cmd>call pum#map#cancel()<CR>
inoremap <PageDown> <Cmd>call pum#map#insert_relative_page(+1)<CR>
inoremap <PageUp>   <Cmd>call pum#map#insert_relative_page(-1)<CR>
" inoremap <silent><expr> <Tab>
"       \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
"       \ '<Tab>'
" inoremap <silent><expr> <S-Tab>
"       \ pum#visible() ? '<Cmd>call pum#map#insert_relative(-1)<CR>' :
"       \ '<S-Tab>'

tnoremap <C-n>   <Cmd>call pum#map#insert_relative(+1)<CR>
tnoremap <C-p>   <Cmd>call pum#map#insert_relative(-1)<CR>
'''
# }}}

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'pum.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-inline'
on_source = 'pum.vim'

[[plugins]]
repo = 'Shougo/ddc-source-around'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-matcher_head'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-sorter_rank'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-file'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/neosnippet.vim'
on_source = 'ddc.vim'
depends = ['neosnippet-snippets']
# hook_add {{{
hook_add = '''
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

let g:neosnippet#snippets_directory = expand('$HOME/.config/nvim/snippets')
'''
# }}}

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neco-vim'
on_ft = ['vim', 'toml', 'markdown']
on_event = ['CmdlineChanged']
depends = 'ddc.vim'
# hook_source {{{
hook_source = '''
'''
# }}}

[[plugins]]
repo = 'vim-skk/skkeleton'
if = '0'
on_source = 'ddc.vim'
# hook_add {{{
hook_add = '''
function! s:skkeleton_init() abort
  call skkeleton#config({
        \ 'eggLikeNewline': v:true,
        \ 'globalJisyo': '~/.skk/SKK-JISYO.L',
        \ })
endfunction

function! s:skkeleton_pre() abort
  " Overwrite sources
  let s:prev_buffer_config = ddc#custom#get_buffer()
  call ddc#custom#patch_buffer('sources', ['skkeleton'])
endfunction

function! s:skkeleton_post() abort
  " Restore sources
  call ddc#custom#set_buffer(s:prev_buffer_config)
endfunction


autocmd User skkeleton-initialize-pre call s:skkeleton_init()
autocmd User skkeleton-enable-pre call s:skkeleton_pre()
autocmd User skkeleton-disable-pre call s:skkeleton_post()

imap <C-j> <Plug>(skkeleton-toggle)
cmap <C-j> <Plug>(skkeleton-toggle)
'''
# }}}
# hook_source {{{
hook_source = '''
'''
# }}}

[[plugins]]
repo = 'Shougo/ddc-source-cmdline-history'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'LumaKernel/ddc-tabnine'
if = '!has("win32")'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-nvim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-copilot'
on_source = 'ddc.vim'
