[[plugins]]
repo = 'Shougo/deol.nvim'
on_cmd = 'Deol'
# hook_add {{{
hook_add = '''
let g:deol#enable_ddc_completion = v:true
" let g:deol#floating_border = ['╭', '─', '╮', '│', '╯', '─', '╰', '│']
let g:deol#floating_border = ['┏', '━', '┓', '┃', '┛', '━', '┗', '┃']

function s:floating_deol() abort
  let width_per = 0.8
  let height_per = 0.6

  let winwidth = float2nr(&columns * width_per)
  let wincol = float2nr((&columns - (&columns * width_per)) / 2)
  let winheight = float2nr(&lines * height_per)
  let winrow = float2nr((&lines - (&lines * height_per)) / 2)

  execute 'Deol -toggle -split=floating -winwidth=' . winwidth . ' -winheight=' . winheight . ' -wincol=' . wincol . '-winrow' . winrow
endfunction

function! s:open_deol() abort
  let winheight = &lines / 2
  execute 'Deol -split=horizontal -toggle -winheight=' . winheight
endfunction

command DeolSplit :Deol -split -toggle
command DeolVertical :Deol -split=vertical -toggle
command DeolFloating :call <SID>floating_deol()

nnoremap <Leader>s <Cmd>DeolSplit<CR>
nnoremap <Leader>v <Cmd>DeolVertical<CR>
nnoremap <Leader>t <Cmd>DeolFloating<CR>
'''
# }}}

[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown']
# hook_add {{{
hook_add = '''
let g:previm_enable_realtime = 1
augroup PrevimSettings
  autocmd!
  autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
augroup END
'''
# }}}

[[plugins]]
repo = 'tpope/vim-surround'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']

[[plugins]]
repo = 'vim-denops/denops.vim'
on_event = 'CursorHold'

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
if = 'has("nvim")'
on_event = ['BufEnter', 'BufAdd', 'BufNew', 'BufNewFile', 'BufWinEnter']
hook_post_update = 'TSUpdate'
# lua_source {{{
lua_source = '''
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    'python', 'cpp', 'go', 'typescript', 'vim',
    'toml', 'rust', 'html', 'bash', 'javascript', 'lua', 'tsx', 'haskell'
  },
  sync_install = false,
  autotag = {
    enable = true,
  },
  indent = {
    enable = true
  },
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  },
}

-- require 'nvim-treesitter.install'.compilers = { "gcc", "zig" }
'''
# }}}

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
if = 'has("nvim")'
on_source = ['nvim-treesitter']
# on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# lua_source {{{
lua_source = '''
vim.opt.list = true
-- vim.opt.listchars:append("eol:↵")

require('indent_blankline').setup {
  show_end_of_line = true,
  space_char_blankline = ' ',
  show_current_context = true,
  show_current_context_start = true,
}
'''
# }}}

[[plugins]]
repo = 'windwp/nvim-ts-autotag'
if = 'has("nvim")'
on_source = 'nvim-treesitter'

[[plugins]]
repo = 'lewis6991/gitsigns.nvim'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# lua_source {{{
lua_source = '''
require('gitsigns').setup()
'''
# }}}

[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# lua_source {{{
lua_source = '''
require("nvim-autopairs").setup {}
'''
# }}}

[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = 'mason-lspconfig.nvim'
# hook_add {{{
hook_add = '''
nmap <silent> <Leader>rn <Cmd>lua vim.lsp.buf.rename()<CR>
nmap <silent> <Leader>h <Cmd>lua vim.lsp.buf.hover()<CR>
nmap <silent> <Leader>ca <Cmd>lua vim.lsp.buf.code_action()<CR>
nmap <silent> gd <Cmd>lua vim.lsp.buf.definition()<CR>
nmap <silent> gt <Cmd>lua vim.lsp.buf.type_definition()<CR>
nmap <silent> gi <Cmd>lua vim.lsp.buf.implementation()<CR>
nmap <silent> gr <Cmd>lua vim.lsp.buf.references()<CR>
nmap <silent> F <Cmd>lua vim.lsp.buf.format { async = true }<CR>
'''
# }}}
# lua_source {{{
lua_source = '''
local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
end
'''
# }}}

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'mason-lspconfig.nvim'
# lua_source {{{
lua_source = '''
require("mason").setup({
    ui = {
        border = {'┏', '━', '┓', '┃', '┛', '━', '┗', '┃'},
    }
})
'''
# }}}

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# lua_source {{{
lua_source = '''

require('mason-lspconfig').setup {}
local nvim_lsp = require('lspconfig')

require("mason-lspconfig").setup_handlers({
  function(server)
    if server == 'serve_d' then
      -- local dmdPath = vim.fn.system('asdf where dmd')
      -- local dmdPath = '~/scoop/apps/dmd/2.101.0/src'
      local dmdPath = ''
      if vim.fn.has('win32') == 1 then
        dmdPath = vim.fn.expand('~/scoop/apps/dmd/current/src')
      else
        dmdPath = vim.fn.expand('~/.asdf/installs/dmd/2.101.1/dmd2/src')
      end

      require('lspconfig')[server].setup({
        -- https://github.com/Pure-D/serve-d/blob/master/views/ja.txt
        settings = {
          d = {
            stdlibPath = {dmdPath .. '/phobos', dmdPath .. '/druntime', dmdPath .. '/dmd'},
          },
          dfmt = {
            braceStyle = 'otbs',
          },
        }
      })
    else
      local opts = {}
      -- local node_root_dir = nvim_lsp.util.root_pattern("package.json")
      -- local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

      -- if server == 'tsserver' then
      --   if not is_node_repo then
      --     return
      --   end
      --   opts.root_dir = node_root_dir
      -- elseif server == 'eslint' then
      --   if not is_node_repo then
      --     return
      --   end
      --   opts.root_dir = node_root_dir
      -- elseif server == 'denols' then
      --   if is_node_repo then
      --     return
      --   end

      --   opts.root_dir = nvim_lsp.util.root_pattern("deno.json", "deno.jsonc", "deps.ts", "import_map.json")
      --   opts.init_options = {
      --     lint = true,
      --     unstable = true,
      --     suggest = {
      --       imports = {
      --         hosts = {
      --           ["https://deno.land"] = true,
      --           ["https://cdn.nest.land"] = true,
      --           ["https://crux.land"] = true
      --         }
      --       }
      --     }
      --   }
      -- end

      -- opts.on_attach = function(_, bufnr)
      -- end

      require('lspconfig')[server].setup(opts)
    end
  end
})
'''
# }}}

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
on_source = 'mason.nvim'

[[plugins]]
repo = 'jayp0521/mason-null-ls.nvim'
on_source = 'null-ls.nvim'
# lua_source {{{
lua_source = '''

local null_ls = require('null-ls')

require('mason-null-ls').setup({
  ensure_installed = { 'prettier', 'stylua', 'black' }
})

require('mason-null-ls').setup_handlers({
  function(source_name)
  end,
  prettier = function()
    null_ls.register(null_ls.builtins.formatting.prettier)
  end,
  stylua = function()
    null_ls.register(null_ls.builtins.formatting.stylua)
  end,
  vint = function()
    null_ls.register(null_ls.builtins.diagnostics.vint)
  end,
  black = function()
    null_ls.register(null_ls.builtins.formatting.black)
  end,
})

null_ls.setup()

'''
# }}}

[[plugins]]
repo = 'NvChad/nvim-colorizer.lua'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# lua_source {{{
lua_source = '''
require('colorizer').setup()
'''
# }}}

[[plugins]]
repo = 'nvim-lualine/lualine.nvim'
on_event = ['VimEnter']
depends = ['nightfox.nvim']
# lua_post_source {{{
lua_post_source = '''
local function duck()
  return ''
end

require('lualine').setup {
  options = {
    icons_enabled = true,
    theme = 'auto',
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    disabled_filetypes = {},
    always_divide_middle = true,
    globalstatus = false,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {'branch', 'filename'},
    lualine_c = {'diff', {
      'diagnostics',
      sources = { 'nvim_lsp' }
    }},
    lualine_x = {'filetype', 'encoding', 'fileformat'},
    lualine_y = {'location'},
    lualine_z = {'progress'}
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {'location'},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {
    lualine_a = {'tabs', 'filename'},
    lualine_b = {},
    lualine_c = {},
    lualine_x = {},
    lualine_y = {},
    lualine_z = { duck }
  },
  extensions = {}
}
'''
# }}}

[[plugins]]
repo = 'ErichDonGubler/lsp_lines.nvim'
if = '0'
on_source = 'nvim-lspconfig'
# lua_source {{{
lua_source = '''
require('lsp_lines').setup {}
'''
# }}}
