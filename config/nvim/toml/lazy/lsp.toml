[[plugins]]
repo = 'neovim/nvim-lspconfig'
on_source = 'mason-lspconfig.nvim'
# hook_add {{{
hook_add = '''
nmap <silent> <Leader>rn <Cmd>lua vim.lsp.buf.rename()<CR>
nmap <silent> <Leader>h <Cmd>lua vim.lsp.buf.hover()<CR>
nmap <silent> <Leader>ca <Cmd>lua vim.lsp.buf.code_action()<CR>
nmap <silent> gd <Cmd>lua vim.lsp.buf.definition()<CR>
nmap <silent> gt <Cmd>lua vim.lsp.buf.type_definition()<CR>
nmap <silent> gi <Cmd>lua vim.lsp.buf.implementation()<CR>
nmap <silent> gr <Cmd>lua vim.lsp.buf.references()<CR>
nmap <silent> gf <Cmd>lua vim.diagnostic.open_float()<CR>
nmap <silent> g] <Cmd>lua vim.diagnostic.goto_next()<CR>
nmap <silent> g[ <Cmd>lua vim.diagnostic.goto_prev()<CR>
nmap <silent> F <Cmd>lua vim.lsp.buf.format { async = true }<CR>
'''
# }}}
# lua_add {{{
lua_add = '''
local function on_cursor_hold()
  if vim.lsp.buf.server_ready() then
    vim.diagnostic.open_float()
  end
end


-- local diagnostic_hover_augroup_name = "lspconfig-diagnostic"
-- vim.api.nvim_set_option("updatetime", 500)
-- vim.api.nvim_create_augroup(diagnostic_hover_augroup_name, { clear = true })
-- vim.api.nvim_create_autocmd({ "CursorHold" }, {
--   group = diagnostic_hover_augroup_name,
--   callback = on_cursor_hold
-- })

-- vim.diagnostic.config({ virtual_text = false })
'''
# }}}
# lua_source {{{
lua_source = '''
local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = "" })
end

local nvim_lsp = require('lspconfig')

local dmdPath = ''
if vim.fn.has('win32') == 1 then
  dmdPath = vim.fn.expand('~/scoop/apps/dmd/current/src')
else
  dmdPath = vim.fn.expand('~/.asdf/installs/dmd/2.101.1/dmd2/src')
end

nvim_lsp['serve_d'].setup({
  -- https://github.com/Pure-D/serve-d/blob/master/views/ja.txt
  settings = {
    d = {
      stdlibPath = {dmdPath .. '/phobos', dmdPath .. '/druntime', dmdPath .. '/dmd'},
    },
    dfmt = {
      braceStyle = 'otbs',
    },
  }
})
'''
# }}}

[[plugins]]
repo = 'williamboman/mason.nvim'
on_source = 'mason-lspconfig.nvim'
# lua_source {{{
lua_source = '''
require("mason").setup({
    ui = {
        border = {'┏', '━', '┓', '┃', '┛', '━', '┗', '┃'},
    }
})
'''
# }}}

[[plugins]]
repo = 'williamboman/mason-lspconfig.nvim'
on_event = ['BufRead', 'BufNewFile', 'BufEnter']
# lua_source {{{
lua_source = '''

require('mason-lspconfig').setup {}
local nvim_lsp = require('lspconfig')

require("mason-lspconfig").setup_handlers({
  function(server)
    if server == 'serve_d' then
      -- local dmdPath = vim.fn.system('asdf where dmd')
      -- local dmdPath = '~/scoop/apps/dmd/2.101.0/src'
      local dmdPath = ''
      if vim.fn.has('win32') == 1 then
        dmdPath = vim.fn.expand('~/scoop/apps/dmd/current/src')
      else
        dmdPath = vim.fn.expand('~/.asdf/installs/dmd/2.101.1/dmd2/src')
      end

      require('lspconfig')[server].setup({
        -- https://github.com/Pure-D/serve-d/blob/master/views/ja.txt
        settings = {
          d = {
            stdlibPath = {dmdPath .. '/phobos', dmdPath .. '/druntime', dmdPath .. '/dmd'},
          },
          dfmt = {
            braceStyle = 'otbs',
          },
        }
      })
    else
      local opts = {}
      -- local node_root_dir = nvim_lsp.util.root_pattern("package.json")
      -- local is_node_repo = node_root_dir(vim.api.nvim_buf_get_name(0)) ~= nil

      -- if server == 'tsserver' then
      --   if not is_node_repo then
      --     return
      --   end
      --   opts.root_dir = node_root_dir
      -- elseif server == 'eslint' then
      --   if not is_node_repo then
      --     return
      --   end
      --   opts.root_dir = node_root_dir
      -- elseif server == 'denols' then
      --   if is_node_repo then
      --     return
      --   end

      --   opts.root_dir = nvim_lsp.util.root_pattern("deno.json", "deno.jsonc", "deps.ts", "import_map.json")
      --   opts.init_options = {
      --     lint = true,
      --     unstable = true,
      --     suggest = {
      --       imports = {
      --         hosts = {
      --           ["https://deno.land"] = true,
      --           ["https://cdn.nest.land"] = true,
      --           ["https://crux.land"] = true
      --         }
      --       }
      --     }
      --   }
      -- end

      -- opts.on_attach = function(_, bufnr)
      -- end

      require('lspconfig')[server].setup(opts)
    end
  end
})
'''
# }}}

[[plugins]]
repo = 'jose-elias-alvarez/null-ls.nvim'
on_source = 'mason.nvim'

[[plugins]]
repo = 'jayp0521/mason-null-ls.nvim'
on_source = 'null-ls.nvim'
# lua_source {{{
lua_source = '''

local null_ls = require('null-ls')

require('mason-null-ls').setup({
  ensure_installed = { 'prettier', 'stylua', 'black' }
})

require('mason-null-ls').setup_handlers({
  function(source_name)
  end,
  prettier = function()
    null_ls.register(null_ls.builtins.formatting.prettier)
  end,
  stylua = function()
    null_ls.register(null_ls.builtins.formatting.stylua)
  end,
  vint = function()
    null_ls.register(null_ls.builtins.diagnostics.vint)
  end,
  black = function()
    null_ls.register(null_ls.builtins.formatting.black)
  end,
})

null_ls.setup()

'''
# }}}

[[plugins]]
repo = 'ErichDonGubler/lsp_lines.nvim'
if = '0'
on_source = 'nvim-lspconfig'
# lua_source {{{
lua_source = '''
require('lsp_lines').setup {}
'''
# }}}
